{"name": "test_qlogin_normal", "status": "broken", "statusDetails": {"message": "TypeError: Object of type Response is not JSON serializable", "trace": "self = <test_login.TestUserLogin object at 0x000001DB53D2D640>\n\n    def test_qlogin_normal(self):\n        case_data = get_test_data(self.data_list, \"test_qlogin_normal\")\n        if not case_data:  # 有可能为None\n            logging.error(\"用例数据不存在\")\n    \n        url = case_data.get('url')\n        data = json.loads(case_data.get('data'))\n        expect_res = case_data.get('expect_res')\n    \n        res = requests.post(url=url, json=data, verify=False)\n        assert res.json()['code'] == expect_res\n        # print(f\"验证码登录成功： {res.reason}\")\n        logging.info(\"验证码登录成功：{}\".format(res.reason))\n    \n>       res_text = json.dumps(res,indent=2,ensure_ascii=False)\n\ntest_login.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\soft\\anaconda3\\lib\\json\\__init__.py:234: in dumps\n    return cls(\nC:\\soft\\anaconda3\\lib\\json\\encoder.py:201: in encode\n    chunks = list(chunks)\nC:\\soft\\anaconda3\\lib\\json\\encoder.py:438: in _iterencode\n    o = _default(o)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x000001DB53D2D5E0>\no = <Response [200]>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type Response is not JSON serializable\n\nC:\\soft\\anaconda3\\lib\\json\\encoder.py:179: TypeError"}, "attachments": [{"name": "log", "source": "6347f67a-7804-4632-b3d0-82c0ea15f6f3-attachment.txt", "type": "text/plain"}], "start": 1614933588733, "stop": 1614933588922, "uuid": "27fabdfe-8b97-49ed-9904-909cf27a3f06", "historyId": "415ce8af72144b8e2e2a2835b3d3e60d", "testCaseId": "0210d8c0eab07c4329b10bb4c3919f81", "fullName": "test_login.TestUserLogin#test_qlogin_normal", "labels": [{"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestUserLogin"}, {"name": "host", "value": "liailian"}, {"name": "thread", "value": "11016-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}